{"version":3,"sources":["api.js","CustomerRewardsTable.js","App.js","reportWebVitals.js","index.js"],"names":["a","apiRes","require","CustomerRewardsTable","transactionData","useState","tranformedData","setTransformedData","useEffect","updatedTrans","map","transaction","cName","totalRewardsPoints","monthlyRewards","monthlyTransactionData","mTrans","points","billAmounts","amt","above100","push","month","billingMonth","totalPoints","id","item","data","index","App","transactionsList","setTransactions","getTransactionsData","then","response","customersTransactionData","catch","console","error","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gwBAAO,4BAAAA,EAAA,sEAEGC,EAASC,EAAQ,IAFpB,kBAGID,GAHJ,oG,uCCsDQE,EAnDc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAAsB,EACPC,mBAAS,IADF,mBAC7CC,EAD6C,KAC7BC,EAD6B,KA4BpD,OA1BAC,qBAAU,WACR,IAAMC,EAAeL,EAAgBM,KAAI,SAAAC,GACvC,IAAMC,EAAQD,EAAYC,MACtBC,EAAqB,EACrBC,EAAiB,GAkBrB,OAjBAH,EAAYI,uBAAuBL,KAAI,SAAAM,GACrC,IAAIC,EAAS,EACbD,EAAOE,YAAYR,KAAI,SAAAS,GACrB,IAAIC,EAAWD,EAAM,IACjBC,EAAW,IACbH,GAAqB,EAAXG,GAERD,EAAM,KACRF,GAAU,OAGdJ,GAAsBI,EACtBH,EAAeO,KAAK,CAClBC,MAAON,EAAOO,aACdC,YAAaP,OAGV,CAAEL,QAAOC,qBAAoBC,qBAEtCP,EAAmBE,KAClB,CAACL,IAEF,wBAAOqB,GAAG,YAAV,UACE,+BACE,+CACCnB,EAAe,IAAMA,EAAe,GAAGQ,eAAeJ,KAAI,SAAAgB,GACzD,OAAO,6BAAKA,EAAKJ,WAEnB,wDAEDhB,EAAeI,KAAI,SAACiB,EAAMC,GACzB,OACE,+BACE,6BAAKD,EAAKf,QACTe,EAAKb,eAAeJ,KAAI,SAAAY,GACvB,OAAO,6BAAKA,EAAME,iBAEpB,6BAAKG,EAAKd,uBALHe,UCpBJC,EAjBH,WAAO,IAAD,EAC4BxB,mBAAS,IADrC,mBACTyB,EADS,KACSC,EADT,KAUhB,OARAvB,qBAAU,YFPL,WAAP,gCEQIwB,GACGC,MAAK,SAAAC,GACJH,EAAgBG,EAASC,6BAE1BC,MAAMC,QAAQC,SAChB,IAGD,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,CAAsBnC,gBAAiB0B,OCL9BU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.71fb0680.chunk.js","sourcesContent":["export async function getTransactionsData() {\r\n  try {\r\n    const apiRes = require(\"./transactions.json\");\r\n    return apiRes;\r\n  } catch (e) {\r\n    throw e;\r\n  }\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst CustomerRewardsTable = ({ transactionData }) => {\r\n  const [tranformedData, setTransformedData] = useState([]);\r\n  useEffect(() => {\r\n    const updatedTrans = transactionData.map(transaction => {\r\n      const cName = transaction.cName;\r\n      let totalRewardsPoints = 0;\r\n      let monthlyRewards = [];\r\n      transaction.monthlyTransactionData.map(mTrans => {\r\n        let points = 0;\r\n        mTrans.billAmounts.map(amt => {\r\n          let above100 = amt - 100;\r\n          if (above100 > 0) {\r\n            points += above100 * 2;\r\n          }\r\n          if (amt > 50) {\r\n            points += 50;\r\n          }\r\n        });\r\n        totalRewardsPoints += points;\r\n        monthlyRewards.push({\r\n          month: mTrans.billingMonth,\r\n          totalPoints: points\r\n        });\r\n      });\r\n      return { cName, totalRewardsPoints, monthlyRewards };\r\n    });\r\n    setTransformedData(updatedTrans);\r\n  }, [transactionData]);\r\n  return (\r\n    <table id=\"customers\">\r\n      <tr>\r\n        <th>Customer Name</th>\r\n        {tranformedData[0] && tranformedData[0].monthlyRewards.map(item => {\r\n          return <th>{item.month}</th>;\r\n        })}\r\n        <th>Total Reward Points</th>\r\n      </tr>\r\n      {tranformedData.map((data, index) => {\r\n        return (\r\n          <tr key={index}>\r\n            <td>{data.cName}</td>\r\n            {data.monthlyRewards.map(month => {\r\n              return <td>{month.totalPoints}</td>;\r\n            })}\r\n            <td>{data.totalRewardsPoints}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </table>\r\n  );\r\n};\r\nexport default CustomerRewardsTable;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { getTransactionsData } from \"./api\";\nimport CustomerRewardsTable from \"./CustomerRewardsTable\";\n\nconst App = () => {\n  const [transactionsList, setTransactions] = useState([]);\n  useEffect(() => {\n    getTransactionsData()\n      .then(response => {\n        setTransactions(response.customersTransactionData);\n      })\n      .catch(console.error);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <CustomerRewardsTable transactionData={transactionsList} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}